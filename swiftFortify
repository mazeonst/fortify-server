import SwiftUI
import UIKit

@main
struct PasswordGeneratorApp: App {
    @StateObject var authManager = AuthManager()

    var body: some Scene {
        WindowGroup {
            if authManager.isLoggedIn {
                ContentView() // Главный экран после авторизации
                    .environmentObject(authManager)
            } else {
                WelcomeView() // Экран входа/регистрации
                    .environmentObject(authManager)
            }
        }
    }
}

// MARK: - Управление авторизацией и Seed-фразой
class AuthManager: ObservableObject {
    @Published var isLoggedIn: Bool = false
    @Published var seedPhrase: String = ""

    private let seedPhraseKey = "userSeedPhrase"

    init() {
        // При инициализации проверяем, есть ли сохранённая сид-фраза
        if let savedSeed = UserDefaults.standard.string(forKey: seedPhraseKey) {
            self.seedPhrase = savedSeed
            self.isLoggedIn = true
        }
    }

    func login(with seed: String) {
        self.seedPhrase = seed
        self.isLoggedIn = true
        // Сохраняем сид-фразу в UserDefaults
        UserDefaults.standard.set(seed, forKey: seedPhraseKey)
    }

    func logout() {
        self.seedPhrase = ""
        self.isLoggedIn = false
        // Очищаем сид-фразу из UserDefaults при выходе
        UserDefaults.standard.removeObject(forKey: seedPhraseKey)
    }
}

// MARK: - Экран Вход и Регистрация
struct WelcomeView: View {
    @EnvironmentObject var authManager: AuthManager
    @State private var showSeedPhrase = false
    @State private var seedPhrase: String = ""
    @State private var showLoginView = false

    var body: some View {
        VStack {
            Button(action: {
                registerUser()
            }) {
                Text("Регистрация")
                    .fontWeight(.bold)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color.green)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            .padding()

            Button(action: {
                showLoginView = true
            }) {
                Text("Вход")
                    .fontWeight(.bold)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            .padding()
        }
        .sheet(isPresented: $showSeedPhrase) {
            SeedPhraseView(seedPhrase: $seedPhrase)
        }
        .sheet(isPresented: $showLoginView) {
            LoginView()
        }
    }

    func registerUser() {
        guard let url = URL(string: "http://localhost:8000/register") else { return }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let data = data {
                let response = try? JSONDecoder().decode([String: String].self, from: data)
                if let response = response, let seed = response["seed"] {
                    DispatchQueue.main.async {
                        self.seedPhrase = seed
                        self.showSeedPhrase = true
                    }
                }
            }
        }.resume()
    }
}

// MARK: - Seed-фраза после регистрации
struct SeedPhraseView: View {
    @Binding var seedPhrase: String
    @Environment(\.presentationMode) var presentationMode
    @EnvironmentObject var authManager: AuthManager

    var body: some View {
        VStack {
            Text("Ваша сид-фраза:")
                .font(.headline)
            Text(seedPhrase)
                .font(.system(.body, design: .monospaced))
                .padding()
                .border(Color.gray, width: 2)
                .contextMenu {
                    Button(action: {
                        UIPasteboard.general.string = seedPhrase
                    }) {
                        Text("Копировать")
                        Image(systemName: "doc.on.doc")
                    }
                }

            Button(action: {
                // Сохраняем seed-фразу и переходим на главный экран
                authManager.login(with: seedPhrase)
                presentationMode.wrappedValue.dismiss()
            }) {
                Text("Продолжить")
                    .fontWeight(.bold)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            .padding()
        }
        .padding()
    }
}

// MARK: - Экран Вход
struct LoginView: View {
    @State private var seedPhrase: String = ""
    @Environment(\.presentationMode) var presentationMode
    @EnvironmentObject var authManager: AuthManager

    var body: some View {
        VStack {
            TextField("Введите сид-фразу", text: $seedPhrase)
                .padding()
                .border(Color.gray, width: 2)

            Button(action: {
                loginUser()
            }) {
                Text("Войти")
                    .fontWeight(.bold)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            .padding()
        }
        .padding()
    }

    func loginUser() {
        guard let url = URL(string: "http://localhost:8000/login") else { return }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        // Формируем тело запроса
        let body: [String: String] = ["seed": seedPhrase]

        do {
            // Преобразуем тело запроса в JSON
            let jsonData = try JSONSerialization.data(withJSONObject: body, options: [])
            request.httpBody = jsonData
        } catch {
            print("Ошибка сериализации JSON: \(error)")
            return
        }

        // Отладочное сообщение для проверки отправляемого JSON
        if let jsonString = String(data: request.httpBody!, encoding: .utf8) {
            print("Отправленный JSON: \(jsonString)")  // Убедитесь, что строка сид-фразы правильно передана
        }

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Ошибка запроса: \(error)")
                return
            }

            if let httpResponse = response as? HTTPURLResponse {
                print("HTTP код ответа: \(httpResponse.statusCode)")
            }

            guard let data = data else {
                print("Нет данных")
                return
            }

            do {
                // Проверим, что это успешный ответ, и выведем сообщение
                if let responseJSON = try JSONSerialization.jsonObject(with: data, options: []) as? [String: String],
                   let message = responseJSON["message"] {
                    print("Сообщение от сервера: \(message)")
                    // Успешный вход
                    DispatchQueue.main.async {
                        authManager.login(with: seedPhrase)
                        presentationMode.wrappedValue.dismiss() // Закрываем экран логина
                    }
                } else {
                    // Обработка ошибок
                    let errorResponse = try JSONDecoder().decode(ErrorResponse.self, from: data)
                    if let firstError = errorResponse.detail.first {
                        print("Ошибка: \(firstError.msg)")
                    }
                }
            } catch {
                print("Ошибка декодирования ответа: \(error)")
            }
        }.resume()
    }
}
struct ErrorResponse: Codable {
    let detail: [ErrorDetail]
}

struct ErrorDetail: Codable {
    let loc: [String]
    let msg: String
    let type: String
}

// MARK: - Главный экран приложения
struct ContentView: View {
    @EnvironmentObject var authManager: AuthManager
    @State private var selectedTab = 0

    var body: some View {
        TabView(selection: $selectedTab) {
            PasswordGeneratorView()
                .tabItem {
                    Label("Генератор", systemImage: "key.fill")
                }
                .tag(0)
            SavedPasswordsView()
                .tabItem {
                    Label("Сохраненные", systemImage: "folder.fill")
                }
                .tag(1)
            SettingsView()
                .tabItem {
                    Label("Настройки", systemImage: "gearshape.fill")
                }
                .tag(2)
        }
    }
}

// MARK: - Генератор паролей
struct PasswordGeneratorView: View {
    @State private var numberOfPasswords = "1"
    @State private var passwordLength = "16"
    @State private var useUppercase = true
    @State private var useNumbers = true
    @State private var useSpecialCharacters = true
    @State private var generatedPasswords: [String] = []
    @State private var showCopiedAlert = false
    @State private var selectedPassword = ""
    @State private var showSavePasswordView = false
    @EnvironmentObject var authManager: AuthManager

    var body: some View {
        ZStack {
            NavigationView {
                VStack {
                    Form {
                        Section(header: Text("Настройки генерации")) {
                            TextField("Количество паролей", text: $numberOfPasswords)
                                .keyboardType(.numberPad)
                            TextField("Длина пароля", text: $passwordLength)
                                .keyboardType(.numberPad)
                            Toggle(isOn: $useUppercase) {
                                Text("Использовать заглавные буквы")
                            }
                            Toggle(isOn: $useNumbers) {
                                Text("Использовать цифры")
                            }
                            Toggle(isOn: $useSpecialCharacters) {
                                Text("Использовать специальные символы")
                            }
                            Button(action: {
                                generatePasswords()
                            }) {
                                Text("Сгенерировать")
                                    .fontWeight(.bold)
                                    .padding()
                                    .frame(maxWidth: .infinity)
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                            }
                        }

                        Section(header: Text("Сгенерированные пароли")) {
                            ForEach(generatedPasswords, id: \.self) { password in
                                HStack {
                                    Text(password)
                                    Spacer()
                                    Button(action: {
                                        copyToClipboard(text: password)
                                    }) {
                                        Image(systemName: "doc.on.doc")
                                    }
                                    Button(action: {
                                        selectedPassword = password
                                        showSavePasswordView = true
                                    }) {
                                        Image(systemName: "square.and.arrow.down")
                                    }
                                }
                            }
                        }
                    }
                }
                .navigationTitle("Генератор паролей")
            }
        }
        .sheet(isPresented: $showSavePasswordView) {
            SavePasswordView(isPresented: $showSavePasswordView, currentPassword: $selectedPassword, saveAction: savePassword)
                .environmentObject(authManager) // Передаем authManager в SavePasswordView
        }
    }

    func generatePasswords() {
        guard let num = Int(numberOfPasswords), let length = Int(passwordLength) else { return }
        generatedPasswords = (0..<num).map { _ in
            generatePassword(length: length)
        }
    }

    func generatePassword(length: Int) -> String {
        let letters = "abcdefghijklmnopqrstuvwxyz"
        let upperLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let numbers = "0123456789"
        let specialCharacters = "!@#$%^&*()_-+=<>?"

        var characters = letters
        if useUppercase { characters += upperLetters }
        if useNumbers { characters += numbers }
        if useSpecialCharacters { characters += specialCharacters }

        return String((0..<length).map { _ in characters.randomElement()! })
    }

    func copyToClipboard(text: String) {
        UIPasteboard.general.string = text
        showCopiedAlert = true
    }

    func savePassword(service: String, email: String, username: String, password: String) {
        // Отправка пароля на сервер для сохранения
        guard let url = URL(string: "http://localhost:8000/save_password") else { return }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let passwordData = PasswordData(password_name: "NewPassword", password_value: password, service: service, email: email, username: username)

        // Преобразуем структуру в словарь
        let body: [String: Any] = [
            "seed": authManager.seedPhrase,
            "password_data": passwordData.toDictionary() // Используем преобразование в словарь
        ]

        // Преобразуем словарь в JSON
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: body, options: [])
            request.httpBody = jsonData
        } catch {
            print("Ошибка сериализации JSON: \(error)")
            return
        }

        URLSession.shared.dataTask(with: request) { _, _, _ in
            // Обработка результата сохранения
        }.resume()
    }
}

// MARK: - SavePasswordView
struct SavePasswordView: View {
    @Binding var isPresented: Bool
    @Binding var currentPassword: String
    @EnvironmentObject var authManager: AuthManager
    var saveAction: (String, String, String, String) -> Void

    @State private var service = ""
    @State private var email = ""
    @State private var username = ""

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Сервис")) {
                    TextField("Сервис", text: $service)
                    TextField("Email", text: $email)
                    TextField("Username", text: $username)
                }

                Section(header: Text("Пароль")) {
                    Text(currentPassword)
                        .font(.system(.body, design: .monospaced))
                }
            }
            .navigationBarTitle("Сохранить пароль", displayMode: .inline)
            .navigationBarItems(leading: Button("Отмена") {
                isPresented = false
            }, trailing: Button("Сохранить") {
                saveAction(service, email, username, currentPassword)
                isPresented = false
            })
        }
    }
}

// MARK: - Отображение сохранённых паролей
struct SavedPasswordsView: View {
    @EnvironmentObject var authManager: AuthManager
    @State private var savedPasswords: [PasswordData] = []

    var body: some View {
        NavigationView {
            List(savedPasswords, id: \.password_name) { password in
                VStack(alignment: .leading) {
                    Text(password.service).font(.headline)
                    Text("Логин: \(password.username)").font(.subheadline)
                    Text("Пароль: \(password.password_value)").font(.system(.body, design: .monospaced))
                }
            }
            .navigationTitle("Сохраненные пароли")
            .onAppear(perform: loadPasswords)
        }
    }

    func loadPasswords() {
        // Загрузка паролей с сервера по текущей сид-фразе
        guard let url = URL(string: "http://localhost:8000/get_passwords?seed=\(authManager.seedPhrase)") else {
            print("Неверный URL")
            return
        }

        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("Ошибка загрузки данных: \(error)")
                return
            }

            guard let data = data else {
                print("Нет данных")
                return
            }

            do {
                // Декодируем данные с сервера
                let decodedResponse = try JSONDecoder().decode(PasswordsResponse.self, from: data)
                DispatchQueue.main.async {
                    print("Загруженные пароли: \(decodedResponse.passwords)")
                    self.savedPasswords = decodedResponse.passwords // Обновляем состояние с паролями
                }
            } catch {
                print("Ошибка декодирования: \(error)")
            }
        }.resume()
    }
}
struct PasswordsResponse: Codable {
    let passwords: [PasswordData]
}

struct PasswordData: Codable {
    let password_name: String
    let password_value: String
    let service: String
    let email: String
    let username: String

    func toDictionary() -> [String: Any] {
        return [
            "password_name": password_name,
            "password_value": password_value,
            "service": service,
            "email": email,
            "username": username
        ]
    }
}

// MARK: - Настройки — отображение текущей Seed-фразы
struct SettingsView: View {
    @EnvironmentObject var authManager: AuthManager

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Общие")) {
                    Toggle("Использовать биометрию", isOn: .constant(false)) // Пока не используется
                }

                Section(header: Text("Seed-фраза")) {
                    Text(authManager.seedPhrase)
                        .font(.system(.body, design: .monospaced))
                        .contextMenu {
                            Button(action: {
                                UIPasteboard.general.string = authManager.seedPhrase
                            }) {
                                Text("Копировать")
                                Image(systemName: "doc.on.doc")
                            }
                        }
                }

                Section {
                    Button(action: {
                        authManager.logout() // Выход из аккаунта
                    }) {
                        Text("Выйти из аккаунта")
                            .foregroundColor(.red)
                    }
                }
            }
            .navigationTitle("Настройки")
        }
    }
}


// MARK: - Previews
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

struct PasswordGeneratorView_Previews: PreviewProvider {
    static var previews: some View {
        PasswordGeneratorView()
    }
}

struct SavedPasswordsView_Previews: PreviewProvider {
    static var previews: some View {
        SavedPasswordsView()
    }
}

